---
title: WebView·开车指南
date: 2016-08-18
tags: Android·Bug
author: BugDev
summary: 北京市东城区首席Bug布道师开山之作，一整月交通事故血泪经验，教你如何快速成为‘伪’老司机，开启WebView飙车之旅。
---
<br><br><br>
#WebView·开车指南
<br>
  
## 前言

  喝酒不开车，开车不喝酒。

<br>
## 目录

  1. WebView简介
  2. WebView基本使用
  3. WebViewClient
  4. WebChromeClient

<br>  
## WebView简介
  
  为了方便开发者实现在app内展示网页并与网页交互的需求，Android SDK提供了WebView组件。它继承自AbsoluteLayout，展示网页的同时，也可以在其中放入其他的子View。
  从Android 4.4（KitKat）开始，原本基于WebKit的WebView开始基于Chromium内核，这一改动大大提升了WebView组件的性能以及对HTML5,CSS3,JavaScript的支持。不过它的API却没有很大的改动，在兼容低版本的同时只引进了少部分新的API，并不需要你做很大的改动。
不过有几点改变需要注意，但我尝试着翻译了下，发现还是英文原文说得好，所以我贴链接吧~~~
[Migrating to WebView in Android 4.4](https://developer.android.com/guide/webapps/migrating.html)

<br>
##WebView基本使用
  
  下面简单介绍下WebView的基本使用：
  首先新建一个工程，在layout文件里放入一个WebView控件（当然也可以通过Java代码动态放入，这里不演示了）
  
  ```XML
  <?xml version="1.0" encoding="utf-8"?>
  <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      android:layout_width="match_parent"
      android:layout_height="match_parent">
  
      <WebView
          android:id="@+id/web_view"
          android:layout_width="match_parent"
          android:layout_height="match_parent"/>
  </LinearLayout>
  ```
  
  然后在Activity的onCreate方法里写入如下代码：
  ```Java
  String url = "https://www.google.com";
  WebView webView = (WebView) findViewById(R.id.web_view);
  webView.loadUrl(url);
  ```
  接着在AndroidManifest声明访问网络的权限：
  ```XML
  <uses-permission android:name="android.permission.INTERNET"/>
  ```
  就，完事了~
  这时运行app，它已经可以访问指定地址的网页了。
  <br><br>
  上面提到了WebView继承自AbsoluteLayout，可以在其中放入一些子View，那也顺手来一下。
  Layout文件改为：
  ```XML
  <?xml version="1.0" encoding="utf-8"?>
  <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <WebView
        android:id="@+id/web_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <Button
            android:id="@+id/button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_x="170dp"
            android:layout_y="400dp"
            android:background="@color/colorAccent"
            android:text="@string/app_name" />
    </WebView>
  </LinearLayout>
  ```
  
  Activity的onCreate里加上：
  ```Java
  Button button = (Button) findViewById(R.id.button);
  button.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View view) {
      Toast.makeText(getApplicationContext(), "系好安全带!", Toast.LENGTH_SHORT).show();
    }
  });
  ```
  这时，运行app，里面就会多出一个Button~ 但如果你真的运行的话，你就会发现，app会自动跳到浏览器并打开指定的网页，而并非在app内展示网页，那这就与我们的初衷背道而驰了，那么要如何实现网页在App内打开呢?这就引出了下一小节会提到的东西：WebViewClient。我先将代码贴出，具体实现原理留到下节说明。
  
  最终XML布局就如上面那样，Java代码（最终）如下：
  ```Java
  public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        String url = "https://www.google.com";
        WebView webView = (WebView) findViewById(R.id.web_view);
        webView.loadUrl(url);

        webView.setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                view.loadUrl(request.toString());
                return true;
            }
        });

        Button button = (Button) findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Toast.makeText(getApplicationContext(), "系好安全带!", Toast.LENGTH_SHORT).show();
            }
        });
    }
  }
  ```
  
  效果图：
  


