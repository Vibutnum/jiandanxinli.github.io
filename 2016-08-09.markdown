## Express - 简单介绍 Express

express 是 **Node.js** 上最流行的 Web 开发框架，使用它我们可以快速的开发一个 Web 应用。

安装 express 命令行工具，使用它我们可以初始化一个 express 项目。

![express](https://cloud.githubusercontent.com/assets/6661673/17502822/ba3929ca-5e1d-11e6-9aae-ed48653b03cc.jpg)

## 新建一个项目

执行 express -e blog

![new-express](https://cloud.githubusercontent.com/assets/6661673/17502876/137642d4-5e1e-11e6-8df1-08b609f7d670.jpg)

进入项目目录后执行 npm install

安装完成后 执行 DEBUG=blog:* npm start

![image](https://cloud.githubusercontent.com/assets/6661673/17507925/da030858-5e44-11e6-847a-984bf7a1fbf4.png)


在浏览器里访问 localhost:3000

你会发现一个简单web 应用已经搭建起来了

## 目录结构

你可以在第一步执行 express -e blog 后看到代码目录结构

* app.js：启动文件，或者说入口文件
* package.json：存储着工程的信息及模块依赖，当在 dependencies 中添加依赖的模块时，运行npm install，npm 会检查当前目录下的 package.json，并自动安装所有指定的模块
* node_modules：存放 package.json 中安装的模块，当你在 package.json 添加依赖的模块并安装后，存放在这个文件夹下
* public：存放 image、css、js 等文件
* routes：存放路由文件
* views：存放视图文件或者说模版文件
* bin：存放可执行文件

### app.js 中的代码

![app](https://cloud.githubusercontent.com/assets/6661673/17502825/bf2e99ce-5e1d-11e6-81fb-8a92b605e3a6.jpg)

在app.js中我们通过require()加载了express、path 等模块,以及 routes 文件夹下的index. js和 users.js 路由文件。

  * var app = express()：生成一个express实例 app。
  * app.set('views', path.join(__dirname, 'views’))：设置 views 文件夹为存放view文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。
  * app.set('view engine', 'ejs’)：设置视图模板引擎为 ejs。
  * app.use(bodyParser.json())：加载解析json的中间件。
  * app.use(bodyParser.urlencoded({ extended: false }))：加载解析urlencoded请求体的中间件。
  * app.use(cookieParser())：加载解析cookie的中间件。
  * app.use(express.static(path.join(__dirname, 'public')))：设置public文件夹为存放静态文件的目录。
  * app.use('/', routes);和app.use('/users', users)：路由控制器。

## 路由规则

express 封装了多种 http 请求方式，我们主要只使用 `get` 和 `post` 两种，即 `app.get()` 和 `app.post()` 。

`app.get()` 和 `app.post()` 的第一个参数都为请求的路径，第二个参数为处理请求的回调函数，回调函数有两个参数分别是 `req` 和 `res`，代表请求信息和响应信息。路径请求及对应的获取路径有以下几种形式：
  * `req.query`： 处理 `get` 请求，获取 `get` 请求参数
  * `req.params`： 处理 `/:xxx` 形式的 `get` 或 `post` 请求，获取请求参数
  * `req.body`： 处理 `post` 请求，获取 `post` 请求体
  * `req.param()`： 处理 `get` 和 `post` 请求，但查找优先级由高到低为 `req.params`→`req.body`→`req.query`
  
  ```node
  /* GET home page. */
  router.get('/', function(req, res, next) {
    // ?name=111&phone=111
    console.log(req.query)
    // => { name: '111', phone: '111' }
  
    // ?name=111&user[phone]=111
    console.log(req.query)
    // => { name: '111', user: { phone: '111' } }
  
    res.render('index', { title: 'Express' });
  });
  
  router.post('/post', function(req, res, next) {
    // post name=1111&phone=1111
    console.log(req.body)
    // => { name: '1111', phone: '1111' }
  
    // post user[name]=1111&user[phone]=1111
    console.log(req.body.user)
    // => { user: { name : '1111', phone: '1111' } }
  
    res.render('index', { title: 'Express' });
  });
  ```
