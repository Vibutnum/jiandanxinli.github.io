<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简单心理技术团队</title>
  <subtitle>简单心理 · 技术团队</subtitle>
  <id>https://jiandanxinli.github.io/</id>
  <link href="https://jiandanxinli.github.io/"/>
  <link href="https://jiandanxinli.github.io/feed.xml" rel="self"/>
  <updated>2016-07-30T08:00:00+08:00</updated>
  <author>
    <name>北京竹间科技有限公司</name>
  </author>
  <entry>
    <title>选择 jsonapi-resources 的理由</title>
    <link rel="alternate" href="https://jiandanxinli.github.io/2016-07-30.html"/>
    <id>https://jiandanxinli.github.io/2016-07-30.html</id>
    <published>2016-07-30T08:00:00+08:00</published>
    <updated>2016-07-30T16:20:32+08:00</updated>
    <author>
      <name>Ben</name>
    </author>
    <content type="html">&lt;p&gt;Rails 5 发布时的官方日志里，推荐了三种用于构建 API 的 gem，分别是 &lt;a href="https://github.com/rails/jbuilder"&gt;Jbuilder&lt;/a&gt;、&lt;a href="https://github.com/rails-api/active_model_serializers"&gt;Active Model Serializers&lt;/a&gt; 和 &lt;a href="https://github.com/cerebris/jsonapi-resources"&gt;JSONAPI::Resources&lt;/a&gt;，其中前两种需要配合 rails-api 来使用，只有 jsonapi-resources 提供了 JSONAPI::ResourceController。&lt;/p&gt;

&lt;p&gt;我们最终选择了 jsonapi-resources 主要基于以下原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;它的 resource 语法与 active_model_serializers 相近，而我们之前使用的是 active_model_serializers&lt;/li&gt;
&lt;li&gt;active_model_serializers 不支持 immutable 特性，必须基于某个 model，而我们有些 resource 并非基于 model&lt;/li&gt;
&lt;li&gt;jsonapi-resources 内置了 fields 选项，可以方便的在请求端指定返回的字段，而不必返回全部字段&lt;/li&gt;
&lt;li&gt;返回的数据结构符合 &lt;a href="http://jsonapi.org/"&gt;jsonapi 规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSONAPI::ResourceController 提供了 RESTful 的封装，可以省去不少代码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上的原因只是对目前项目来说最需要的特性，更多特性可以去看官方文档。&lt;/p&gt;

&lt;p&gt;参考链接：&lt;/p&gt;

&lt;p&gt;jsonapi-resources： &lt;a href="https://github.com/cerebris/jsonapi-resources"&gt;https://github.com/cerebris/jsonapi-resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jsonapi：&lt;a href="http://jsonapi.org"&gt;http://jsonapi.org&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>iOS上简易轮播图的实现</title>
    <link rel="alternate" href="https://jiandanxinli.github.io/2016-07-29.html"/>
    <id>https://jiandanxinli.github.io/2016-07-29.html</id>
    <published>2016-07-29T08:00:00+08:00</published>
    <updated>2016-07-31T09:15:08+08:00</updated>
    <author>
      <name>Qiuncheng</name>
    </author>
    <content type="html">&lt;h3&gt;前言&lt;/h3&gt;

&lt;p&gt;见过很多的iOS应用，都有无限轮播图，之前也看到过很多相关实现的文章，可是仅仅就是一看而过罢了。当自己在项目中用到这个，真正去写的时候才发现不是很容易，遇到了一些问题，这篇文章就记录下自己最后成功实现轮播图的历程。&lt;/p&gt;

&lt;h3&gt;原理&lt;/h3&gt;

&lt;p&gt;原理其实就是一种假象。不过在我这里，目前有过两种原理的实现。一种利用&lt;code&gt;UICollectionView&lt;/code&gt;实现轮播，另一种利用&lt;code&gt;UIScrollView&lt;/code&gt;实现轮播。
今天我们要来打造一款这样的轮播图（图画的不好，请勿见怪）。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cloud.githubusercontent.com/assets/9990834/17270175/36fa47a0-568f-11e6-8f3f-bbed783d6b41.png" alt="举例：三张图的无限轮播" /&gt;&lt;/p&gt;

&lt;h4&gt;原理一：利用&lt;code&gt;UIScrollView&lt;/code&gt;实现轮播图。&lt;/h4&gt;

&lt;p&gt;要想实现这样的效果，我们使用&lt;code&gt;UIScrollView&lt;/code&gt;包含image0，image1，image2的三个&lt;code&gt;UIImageView&lt;/code&gt;都是放在&lt;code&gt;UIScrollView&lt;/code&gt;里面的，但是这样的话是不可以实现轮播的。要想实现轮播就要再在该&lt;code&gt;UIScrollView&lt;/code&gt;的左右两侧各加一张&lt;code&gt;UIImageView&lt;/code&gt;。在最后一张放image0， 第一张放image2。这样的话当我们滚动到最后或者最前面的的时候，我们就把列表切换到相应的位置，注意这时候切换的时候不能有动画。只需要调用&lt;code&gt;scrollView.contentOffset = CGPoint(...)&lt;/code&gt;即可。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cloud.githubusercontent.com/assets/9990834/17270176/408925d4-568f-11e6-9217-e26c3cf09093.png" alt="实际UISrollView图" /&gt;&lt;/p&gt;

&lt;h4&gt;原理二：利用&lt;code&gt;UICollectionView&lt;/code&gt;实现轮播图。&lt;/h4&gt;

&lt;p&gt;你当然可以利用&lt;strong&gt;原理一&lt;/strong&gt;再用&lt;code&gt;UICollectionView&lt;/code&gt;实现一次。但是我这里采用一种偷懒的方式，利用&lt;code&gt;UICollectionView&lt;/code&gt;的cell重用机制。创建个无数个cell，比如3x20000。当用户第一次进来的我们就将UICollectionView滑到3x20000x0.5的位置。然后利用&lt;code&gt;cell.indexPath.item % 3&lt;/code&gt;来对cell上的UIImageView进行image显示。这种方式比较偷懒，在后来添加NSTimer自动轮播和点击事件的时候也比较简单，不过有点大炮打小鸟的感觉。所以我在这里也只是介绍下原理，如果你有兴趣，可以自己尝试去实现下。而且UICollectionView自带一个方法&lt;code&gt;- scrollToItemAtIndexPath:atScrollPosition:animated:&lt;/code&gt;还比较厉害。&lt;/p&gt;

&lt;h3&gt;具体实现&lt;/h3&gt;

&lt;p&gt;针对原理一，我就来简单实现下。(我这里使用代码创建,你也可以使用Storyboard创建,原理一样)&lt;/p&gt;

&lt;h4&gt;创建工程，创建&lt;code&gt;BannerView.Swift&lt;/code&gt;,添加初始化代码如下：&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/// 初始化scrollView
lazy var scrollView: UIScrollView = {
       let scrollView = UIScrollView()
       scrollView.delegate = self
       scrollView.alwaysBounceVertical = false
       scrollView.bounces = true
       scrollView.pagingEnabled = true
       scrollView.scrollEnabled = true
       scrollView.showsVerticalScrollIndicator = false
       scrollView.showsHorizontalScrollIndicator = false
       return scrollView
   }()
/// 初始化pageControl
   lazy var pageControl: UIPageControl = {
       let pageControl = UIPageControl()
       pageControl.currentPageIndicatorTintColor = UIColor.redColor()
       pageControl.pageIndicatorTintColor = UIColor.whiteColor()
       return pageControl
   }()

   /// 在init里调用setupSubviews即可
   func setupSubviews() {  
       self.addSubview(scrollView)
       self.addSubview(pageControl)

       scrollView.translatesAutoresizingMaskIntoConstraints = false
       pageControl.translatesAutoresizingMaskIntoConstraints = false

       self.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:|[v]|", options: [], metrics: nil, views: ["v": scrollView]))
       self.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:|[v]|", options: [], metrics: nil, views: ["v": scrollView]))

       self.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:[p(==20)]-10-|", options: [], metrics: nil, views: ["p": pageControl]))
       self.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:[p(==100)]-10-|", options: [], metrics: nil, views: ["p": pageControl]))
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;初始化UIScrollView：&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func setupScrollView() {
        /// 创建 （imageNames.count + 2）个UIImageView
        for index in 0 ... (imageNmaes.count + 1) {
            let imageView = UIImageView(frame: CGRect(x: self.width*CGFloat(index), y: 0, width: self.width, height: self.height))
            var picName = String()
            switch index {
            case 0:
                picName = imageNames[imageNames.count-1]
                break
            case imageNames.count + 1:
                picName = imageNames[0]
                break
            default:
                picName = imageNames[index-1]
                break
            }

//          imageView.af_setImageWithURL(NSURL(string: picName)!)
            imageView.image = UIImage(named: picName)
            imageView.contentMode = .ScaleToFill
            imageView.clipsToBounds = true
            imageView.userInteractionEnabled = true
            scrollView.addSubview(imageView)
        }
        scrollView.contentSize = CGSize(width: self.width * CGFloat(imageNames.count + 2), height: self.height)
        scrollView.contentOffset = CGPoint(x: self.width, y: 0)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;无限轮番的实现。（重点）使用UIScrollViewDelegate协议。&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func scrollViewDidScroll(scrollView: UIScrollView) {
       if scrollView == self.scrollView {
           let contentOffsetX = scrollView.contentOffset.x
          ///向前滑动到第0张图的时候，滚到第三张图
           if contentOffsetX == 0 {
               scrollView.contentOffset = CGPoint(x: self.width * CGFloat(self.imageNames.count), y: 0)
           }
           /// 跑到第三张图的时候，滚到第0张图
           if contentOffsetX == CGFloat(self.imageNames.count + 1)*self.width {
               scrollView.contentOffset = CGPoint(x: self.width, y: 0)
           }
           /// 改变pageControl，这里要注意，一定要一定要一定要 - 0.5， 因为最前面的第0张图一直不显示。
           let index = scrollView.contentOffset.x / self.width - 0.5
           self.pageControl.currentPage = Int(index)
       }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;添加计时器&lt;/h4&gt;

&lt;p&gt;好了，做到这里，你已经成功实现了轮播图，可是这个轮播图是手动的，下面添加自动滚动。也很简单，设置一个NSTimer计时器即可。代码如下：&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// MARK: - Timer
   var timer: NSTimer?
   var i = 1
   /// 在scrollView上的图片成功设置后调用startTimer即可
   private func startTimer() {
       if timer != nil {
           self.stopTimer()
       }
       /// 这里设置的滚动间隔为2秒
       timer = NSTimer.scheduledTimerWithTimeInterval(2, target: self, selector: #selector(autoScroll), userInfo: nil, repeats: true)
       NSRunLoop.currentRunLoop().addTimer(timer!, forMode: NSDefaultRunLoopMode)
   }
   private func stopTimer() {
       timer?.invalidate()
       timer = nil
   }
   func autoScroll() {
       if i == imageNames.count + 1 {
           i = 1
       }
       i += 1
       /// 在处理无限轮番的时候设置contentOffset没有添加animated，这里要添加上来，不然有种很突兀的感觉。
       scrollView.setContentOffset(CGPoint(x: self.width * CGFloat(i), y: 0), animated: true)
   }
    /// 手动滚动结束后恢复计时
   func scrollViewDidEndDragging(scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        self.startTimer()
    }
    /// 当手动滚动开始时停止计时
    func scrollViewWillBeginDragging(scrollView: UIScrollView) {
        self.stopTimer()
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;添加具体点击事件&lt;/h4&gt;

&lt;p&gt;具体到点击事件的话，我是放在初始化imageView那里处理的，给imageVIew添加一个UITapGestureRecognizer，在这里最好再写一个代理方法，将imageView的点击事件传递出去。然后根据当前&lt;code&gt;contentOffet.x / self.width&lt;/code&gt;来将具体哪张图片的事件传递出去。我就不用代码展示了。&lt;/p&gt;

&lt;h3&gt;结尾&lt;/h3&gt;

&lt;p&gt;还是比较简单的。但是我这个复用性比较差，封装的也不好，可是具体要看思路😂。代码实现放在了Github Wiki上了&lt;a href="https://github.com/qiuncheng/qiuncheng.github.io/wiki/BannerView.Swift"&gt;BannerView.Swift&lt;/a&gt;，由于工程量太小，就没将工程文件上传了。&lt;/p&gt;

&lt;h4&gt;关于作者&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://qiuncheng.com"&gt;Qiuncheng&lt;/a&gt;，一位正在iOS路上前行的初学者，正在努力成为一名合格的iOS开发者。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2.5 个人如何开发一款跨终端的产品？[Ruby Tuesday 的分享]</title>
    <link rel="alternate" href="https://jiandanxinli.github.io/2015-09-08.html"/>
    <id>https://jiandanxinli.github.io/2015-09-08.html</id>
    <published>2015-09-08T08:00:00+08:00</published>
    <updated>2016-07-27T11:40:16+08:00</updated>
    <author>
      <name>Ben</name>
    </author>
    <content type="html">&lt;h2&gt;2.5 个人？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1 个全栈（我 ^_^）&lt;/li&gt;
&lt;li&gt;1 个 Ruby 程序员&lt;/li&gt;
&lt;li&gt;0.5 个前端开发（产品经理兼职）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;跨终端？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;电脑：浏览器、微信 PC 版（PC 版微信支持微信登陆）&lt;/li&gt;
&lt;li&gt;平板：浏览器、App（Android &amp;amp; iOS）、微信&lt;/li&gt;
&lt;li&gt;手机：浏览器、App（Android &amp;amp; iOS）、微信&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些终端不仅用于访问，还需要支持推送和支付：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通知渠道：邮件、短信、微信、App 推送&lt;/li&gt;
&lt;li&gt;支付渠道：支付宝、微信支付、银联支付&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;解决方案&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;尽可能降低开发工作量（人员有限）&lt;/li&gt;
&lt;li&gt;尽可能利用 RoR 已有技术&lt;/li&gt;
&lt;li&gt;基于 User Agent 信息来区分具体终端&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;从 RoR 出发&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用 Turbolinks 优化网页加载体验&lt;/li&gt;
&lt;li&gt;不使用前端 MVC 框架加重工作量&lt;/li&gt;
&lt;li&gt;使用响应式设计 + 部分页面 Variant Response&lt;/li&gt;
&lt;li&gt;不针对各个终端单独制作页面&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;基于 browser 区分终端&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;browser 的双重含义：浏览器 和 browser gem&lt;/li&gt;
&lt;li&gt;每个终端都有各自的 User Agent&lt;/li&gt;
&lt;li&gt;通过扩展 browser gem 来判断当前的终端类型&lt;/li&gt;
&lt;li&gt;通过打印终端类型到 body class 使得 CSS 可以针对性调整样式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;具体步骤&lt;/h2&gt;

&lt;h3&gt;1. 使用并扩展 &lt;a href="https://github.com/fnando/browser"&gt;browser gem&lt;/a&gt; 来判断终端类型&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NAMES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:smileback&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'SmileBack'&lt;/span&gt; &lt;span class="c1"&gt;# 我们 App 的自定义 User Agent 标识&lt;/span&gt;
&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NAMES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:wechat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Wechat'&lt;/span&gt;
&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NAMES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:desktop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Desktop'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Browser&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Meta&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Smileback&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meta&lt;/span&gt;
        &lt;span class="s1"&gt;'smileback'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;smileback?&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Wechat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meta&lt;/span&gt;
        &lt;span class="s1"&gt;'wechat'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;wechat?&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Desktop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meta&lt;/span&gt;
        &lt;span class="s1"&gt;'desktop'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;desktop?&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Consoles&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;smileback?&lt;/span&gt;
      &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ua&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/smileback/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wechat?&lt;/span&gt;
      &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ua&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/MicroMessenger/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;desktop?&lt;/span&gt;
      &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;mobile?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;wechat?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;smileback?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. 在 html body class 里添加 browser 信息，方便 CSS 套用&lt;/h3&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;ua: &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'HTTP_USER_AGENT'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- class 会输出如 chrome modern mac webkit desktop 或 iphone ios mobile modern other safari safari5 webkit --!&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* 默认的样式 */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.desktop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* 桌面浏览器定制样式 */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.mobile&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* 手机浏览器定制样式 */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.wechat&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* 微信定制样式 */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. 使用 &lt;a href="http://api.rubyonrails.org/classes/ActionController/MimeResponds.html"&gt;Variant Response&lt;/a&gt; 来针对部分区别大的页面做两套或多套 views&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# application_controller.rb&lt;/span&gt;

&lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:detect_browser&lt;/span&gt;

&lt;span class="kp"&gt;private&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detect_browser&lt;/span&gt;
  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:mobile&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;ua: &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'HTTP_USER_AGENT'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;mobile?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要拆分的页面，做成如下形式：&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app/views/pages/home.erb
app/views/pages/home.html+mobile.erb # 文件名格式为 响应格式+设备名
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. 添加 helper，方便复杂的情况下调用，比如支付&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# application_helper.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;browser&lt;/span&gt;
  &lt;span class="vi"&gt;@_browser&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;ua: &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'HTTP_USER_AGENT'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight slim"&gt;&lt;code&gt;&lt;span class="c"&gt;/ 懒得转 erb 格式了，下面这段是 slim 格式的&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;smileback?&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"jdxlsmileback://recharges/#{resource.id}/pay"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;支付宝付款
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'银联付款'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unionpay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'data-no-turbolink'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;wechat?&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;weixin_id&lt;/span&gt;
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'微信支付'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="s1"&gt;'wepay'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'button'&lt;/span&gt;
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'银联付款'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unionpay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'data-no-turbolink'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'银联付款'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unionpay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'data-no-turbolink'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'button'&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mobile?&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'支付宝付款'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alipay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'button'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'data-no-turbolink'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'银联付款'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unionpay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'data-no-turbolink'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'支付宝付款'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alipay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'button'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'data-no-turbolink'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'微信支付'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scan_wepay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'银联付款'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_recharge_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unionpay: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'data-no-turbolink'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;其它经验&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;iOS App 我们用 WKWebView 套的壳，WKWebView 比 UIWebView 性能更好些，但限制也更多些，具体可以 Google。&lt;/li&gt;
&lt;li&gt;Android App 我们用默认的 WebView，目前没发现更好的替代品。&lt;/li&gt;
&lt;li&gt;支付渠道之前我们是自己封装的，现在发现 &lt;a href="https://pingxx.com"&gt;Ping++&lt;/a&gt; 也不错，大家可以试试。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;重点来了！！！&lt;/h2&gt;

&lt;h3&gt;简单心理是什么？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;最大的华语心理咨询平台&lt;/li&gt;
&lt;li&gt;最严格的咨询师入驻审核&lt;/li&gt;
&lt;li&gt;立志于提供最专业的心理服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;内心世界那么大，想不想来看看？&lt;/h3&gt;

&lt;p&gt;我们需要：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby 工程师 月薪 15k 起&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们提供：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最人性化的工作环境（老板及大部分员工都有心理学专业背景，程序员鼓励师弱爆了 :smirk: ）&lt;/li&gt;
&lt;li&gt;非北京地区可远程工作（本部位于北京中关村）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欢迎勾搭 &lt;a href="mailto:hr@jiandanxinli.com"&gt;hr@jiandanxinli.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;休息下，看看养眼的照片吧（非 PS）&lt;/h2&gt;

&lt;p&gt;女王大人（曾用名：煤球）及她的孩子们
&lt;img src="http://jdxl-img.b0.upaiyun.com/id_cards/f6c6fb9742d94eb1aa5f73eb3e8b15d1.jpg" alt="猫" /&gt;&lt;/p&gt;

&lt;p&gt;各种帅哥美女云集的活动
&lt;img src="http://jdxl-img.b0.upaiyun.com/id_cards/6a9656184f9a467eac8d7c7f5ab0d5e2.jpg" alt="帅哥美女" /&gt;&lt;/p&gt;

&lt;p&gt;了解更多我们公司的详情可以移步这里： &lt;a href="https://www.jiandanxinli.com/pages/37"&gt;https://www.jiandanxinli.com/pages/37&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
